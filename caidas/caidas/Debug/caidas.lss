
caidas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800100  00800100  0000072c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d6  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000976  00000000  00000000  0000293f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  000032b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005be  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067d  00000000  00000000  00003a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000040fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  9e:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:

void I2C_Slave_Read_addr(void)
{
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	I2C_Basy();	
}
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ac:	80 e3       	ldi	r24, 0x30	; 48
  ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  b2:	08 95       	ret

000000b4 <I2C_Start>:
  b4:	84 ea       	ldi	r24, 0xA4	; 164
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ba:	ec eb       	ldi	r30, 0xBC	; 188
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <I2C_Start+0xa>
  c4:	08 95       	ret

000000c6 <I2C_Write>:
  c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d0:	ec eb       	ldi	r30, 0xBC	; 188
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	ec f7       	brge	.-6      	; 0xd4 <I2C_Write+0xe>
  da:	08 95       	ret

000000dc <I2C_Read>:
unsigned char I2C_Read(unsigned char ack)
{
	if (ack==0)
  dc:	81 11       	cpse	r24, r1
  de:	04 c0       	rjmp	.+8      	; 0xe8 <I2C_Read+0xc>
	{
	TWCR= (1<<TWINT)|(1<<TWEN);
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e6:	03 c0       	rjmp	.+6      	; 0xee <I2C_Read+0x12>
	}
	else
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  e8:	84 ec       	ldi	r24, 0xC4	; 196
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	I2C_Basy();
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <I2C_Read+0x16>
	return TWDR ;
  f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
  fc:	08 95       	ret

000000fe <I2C_Stop>:


void I2C_Stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  fe:	84 e9       	ldi	r24, 0x94	; 148
 100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 104:	08 95       	ret

00000106 <iniciar_usart>:
char valTotal[16]="";
unsigned int dato;
void mandarDato()
{
	ConexionServer();
	EnviarDato();
 106:	51 9a       	sbi	0x0a, 1	; 10
 108:	50 98       	cbi	0x0a, 0	; 10
 10a:	88 e1       	ldi	r24, 0x18	; 24
 10c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 11e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 122:	08 95       	ret

00000124 <envia_caracter_usart>:
 124:	e0 ec       	ldi	r30, 0xC0	; 192
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	95 ff       	sbrs	r25, 5
 12c:	fd cf       	rjmp	.-6      	; 0x128 <envia_caracter_usart+0x4>
 12e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 132:	08 95       	ret

00000134 <envia_cadena_usart>:
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	88 81       	ld	r24, Y
 13c:	88 23       	and	r24, r24
 13e:	31 f0       	breq	.+12     	; 0x14c <envia_cadena_usart+0x18>
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	0e 94 92 00 	call	0x124	; 0x124 <envia_caracter_usart>
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fb cf       	rjmp	.-10     	; 0x142 <envia_cadena_usart+0xe>
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <mpu6050_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	85 ea       	ldi	r24, 0xA5	; 165
 156:	9e e0       	ldi	r25, 0x0E	; 14
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <mpu6050_init+0x6>
 160:	00 c0       	rjmp	.+0      	; 0x162 <mpu6050_init+0x10>
 162:	00 00       	nop
}
void mpu6050_init(void)
{
	_delay_ms(300);
	I2C_Start();
 164:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 168:	80 ed       	ldi	r24, 0xD0	; 208
 16a:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(SMPLRT_DIV);
 16e:	89 e1       	ldi	r24, 0x19	; 25
 170:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(0x07);	//sampling rate 1khz
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Stop();
 17a:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>

	I2C_Start();
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 182:	80 ed       	ldi	r24, 0xD0	; 208
 184:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(PWR_MGMT_1);
 188:	8b e6       	ldi	r24, 0x6B	; 107
 18a:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(0x00);   // x axises is reference or 0x00 internal clock
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Stop();
 194:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
	
	I2C_Start();
 198:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 19c:	80 ed       	ldi	r24, 0xD0	; 208
 19e:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(GYRO_CONFIG);
 1a2:	8b e1       	ldi	r24, 0x1B	; 27
 1a4:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(0x18);
 1a8:	88 e1       	ldi	r24, 0x18	; 24
 1aa:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Stop();
 1ae:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>

	I2C_Start();
 1b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 1b6:	80 ed       	ldi	r24, 0xD0	; 208
 1b8:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(ACCEL_CONFIG);
 1bc:	8c e1       	ldi	r24, 0x1C	; 28
 1be:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(0x18);
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Stop();
 1c8:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
 1cc:	08 95       	ret

000001ce <x_axis>:

}

unsigned short x_axis () // return accelerometer in x direction
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
	unsigned char x_low, x_high;
	I2C_Start();
 1d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 1d6:	80 ed       	ldi	r24, 0xD0	; 208
 1d8:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(ACCEL_XOUT_H);
 1dc:	8b e3       	ldi	r24, 0x3B	; 59
 1de:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Start();
 1e2:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd1);
 1e6:	81 ed       	ldi	r24, 0xD1	; 209
 1e8:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	x_high=I2C_Read(0);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Read>
 1f2:	d8 2f       	mov	r29, r24
	I2C_Stop();
 1f4:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
	
	I2C_Start();
 1f8:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 1fc:	80 ed       	ldi	r24, 0xD0	; 208
 1fe:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(ACCEL_XOUT_L);
 202:	8c e3       	ldi	r24, 0x3C	; 60
 204:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Start();
 208:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd1);
 20c:	81 ed       	ldi	r24, 0xD1	; 209
 20e:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	x_low=I2C_Read(0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Read>
 218:	c8 2f       	mov	r28, r24
	I2C_Stop();
 21a:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
	
	return ((x_high<<8)|x_low)/16;
 21e:	2c 2f       	mov	r18, r28
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	3d 2b       	or	r19, r29
 224:	c9 01       	movw	r24, r18
 226:	99 23       	and	r25, r25
 228:	0c f4       	brge	.+2      	; 0x22c <x_axis+0x5e>
 22a:	0f 96       	adiw	r24, 0x0f	; 15
}
 22c:	95 95       	asr	r25
 22e:	87 95       	ror	r24
 230:	95 95       	asr	r25
 232:	87 95       	ror	r24
 234:	95 95       	asr	r25
 236:	87 95       	ror	r24
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <y_axis>:
unsigned short y_axis ()		// return accelerometer in y direction
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	unsigned char y_low,y_high;
	I2C_Start();
 246:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 24a:	80 ed       	ldi	r24, 0xD0	; 208
 24c:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(ACCEL_YOUT_H);
 250:	8d e3       	ldi	r24, 0x3D	; 61
 252:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Start();
 256:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd1);
 25a:	81 ed       	ldi	r24, 0xD1	; 209
 25c:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	y_high=I2C_Read(0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Read>
 266:	d8 2f       	mov	r29, r24
	I2C_Stop();
 268:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
	
	I2C_Start();
 26c:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 270:	80 ed       	ldi	r24, 0xD0	; 208
 272:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(ACCEL_YOUT_L);
 276:	8e e3       	ldi	r24, 0x3E	; 62
 278:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Start();
 27c:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd1);
 280:	81 ed       	ldi	r24, 0xD1	; 209
 282:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	y_low=I2C_Read(0);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Read>
 28c:	c8 2f       	mov	r28, r24
	I2C_Stop();
 28e:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
	
	return ((y_high<<8)|y_low)/16;
 292:	2c 2f       	mov	r18, r28
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	3d 2b       	or	r19, r29
 298:	c9 01       	movw	r24, r18
 29a:	99 23       	and	r25, r25
 29c:	0c f4       	brge	.+2      	; 0x2a0 <y_axis+0x5e>
 29e:	0f 96       	adiw	r24, 0x0f	; 15
	
}
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	95 95       	asr	r25
 2ae:	87 95       	ror	r24
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <z_axis>:
unsigned short z_axis ()		//return aceleracion z
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
	unsigned char z_low,z_high;
	I2C_Start();
 2ba:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(ACCEL_ZOUT_H);
 2c4:	8f e3       	ldi	r24, 0x3F	; 63
 2c6:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Start();
 2ca:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd1);
 2ce:	81 ed       	ldi	r24, 0xD1	; 209
 2d0:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	z_high=I2C_Read(0);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Read>
 2da:	d8 2f       	mov	r29, r24
	I2C_Stop();
 2dc:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
	
	I2C_Start();
 2e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd0);
 2e4:	80 ed       	ldi	r24, 0xD0	; 208
 2e6:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Write(ACCEL_ZOUT_L);
 2ea:	80 e4       	ldi	r24, 0x40	; 64
 2ec:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	I2C_Start();
 2f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_Start>
	I2C_Write(0xd1);
 2f4:	81 ed       	ldi	r24, 0xD1	; 209
 2f6:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Write>
	z_low=I2C_Read(0);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Read>
 300:	c8 2f       	mov	r28, r24
	I2C_Stop();
 302:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Stop>
	return ((z_high<<8)|z_low)/16;
 306:	2c 2f       	mov	r18, r28
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	3d 2b       	or	r19, r29
 30c:	c9 01       	movw	r24, r18
 30e:	99 23       	and	r25, r25
 310:	0c f4       	brge	.+2      	; 0x314 <z_axis+0x5e>
 312:	0f 96       	adiw	r24, 0x0f	; 15
	
}
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <main>:
int main(void)
{
	//DDRD|=(1<<PIND3);
	I2C_Init();
 32a:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	mpu6050_init();
 32e:	0e 94 a9 00 	call	0x152	; 0x152 <mpu6050_init>
	iniciar_usart();
 332:	0e 94 83 00 	call	0x106	; 0x106 <iniciar_usart>
	
	_delay_ms(50);*/
	//PORTD|=(1<<PIND3);
    while (1) 
    {
		axsis_x = x_axis();
 336:	0e 94 e7 00 	call	0x1ce	; 0x1ce <x_axis>
 33a:	7c 01       	movw	r14, r24
		axsis_y = y_axis();
 33c:	0e 94 21 01 	call	0x242	; 0x242 <y_axis>
 340:	8c 01       	movw	r16, r24
		axsis_z = z_axis();
 342:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <z_axis>
 346:	ec 01       	movw	r28, r24
		
		suma=abs(axsis_x*axsis_x)+abs(axsis_y*axsis_y)+abs(axsis_z*axsis_z);
		
		raiz=sqrt(suma);
 348:	ee 9c       	mul	r14, r14
 34a:	b0 01       	movw	r22, r0
 34c:	ef 9c       	mul	r14, r15
 34e:	70 0d       	add	r23, r0
 350:	70 0d       	add	r23, r0
 352:	11 24       	eor	r1, r1
 354:	77 23       	and	r23, r23
 356:	04 f4       	brge	.+0      	; 0x358 <main+0x2e>
 358:	00 9f       	mul	r16, r16
 35a:	c0 01       	movw	r24, r0
 35c:	01 9f       	mul	r16, r17
 35e:	90 0d       	add	r25, r0
 360:	90 0d       	add	r25, r0
 362:	11 24       	eor	r1, r1
 364:	99 23       	and	r25, r25
 366:	04 f4       	brge	.+0      	; 0x368 <main+0x3e>
 368:	cc 9f       	mul	r28, r28
 36a:	c0 01       	movw	r24, r0
 36c:	cd 9f       	mul	r28, r29
 36e:	90 0d       	add	r25, r0
 370:	90 0d       	add	r25, r0
 372:	11 24       	eor	r1, r1
 374:	99 23       	and	r25, r25
 376:	04 f4       	brge	.+0      	; 0x378 <main+0x4e>
 378:	ee 9c       	mul	r14, r14
 37a:	b0 01       	movw	r22, r0
 37c:	ef 9c       	mul	r14, r15
 37e:	70 0d       	add	r23, r0
 380:	70 0d       	add	r23, r0
 382:	11 24       	eor	r1, r1
 384:	77 23       	and	r23, r23
 386:	1c f4       	brge	.+6      	; 0x38e <main+0x64>
 388:	71 95       	neg	r23
 38a:	61 95       	neg	r22
 38c:	71 09       	sbc	r23, r1
 38e:	00 9f       	mul	r16, r16
 390:	c0 01       	movw	r24, r0
 392:	01 9f       	mul	r16, r17
 394:	90 0d       	add	r25, r0
 396:	90 0d       	add	r25, r0
 398:	11 24       	eor	r1, r1
 39a:	99 23       	and	r25, r25
 39c:	1c f4       	brge	.+6      	; 0x3a4 <main+0x7a>
 39e:	91 95       	neg	r25
 3a0:	81 95       	neg	r24
 3a2:	91 09       	sbc	r25, r1
 3a4:	68 0f       	add	r22, r24
 3a6:	79 1f       	adc	r23, r25
 3a8:	cc 9f       	mul	r28, r28
 3aa:	c0 01       	movw	r24, r0
 3ac:	cd 9f       	mul	r28, r29
 3ae:	90 0d       	add	r25, r0
 3b0:	90 0d       	add	r25, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	99 23       	and	r25, r25
 3b6:	1c f4       	brge	.+6      	; 0x3be <main+0x94>
 3b8:	91 95       	neg	r25
 3ba:	81 95       	neg	r24
 3bc:	91 09       	sbc	r25, r1
 3be:	68 0f       	add	r22, r24
 3c0:	79 1f       	adc	r23, r25
 3c2:	07 2e       	mov	r0, r23
 3c4:	00 0c       	add	r0, r0
 3c6:	88 0b       	sbc	r24, r24
 3c8:	99 0b       	sbc	r25, r25
 3ca:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__floatsisf>
 3ce:	0e 94 cd 02 	call	0x59a	; 0x59a <sqrt>
 3d2:	4b 01       	movw	r8, r22
 3d4:	5c 01       	movw	r10, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d6:	4a e0       	ldi	r20, 0x0A	; 10
 3d8:	60 e3       	ldi	r22, 0x30	; 48
 3da:	71 e0       	ldi	r23, 0x01	; 1
 3dc:	c7 01       	movw	r24, r14
 3de:	0e 94 25 03 	call	0x64a	; 0x64a <__itoa_ncheck>
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	60 e2       	ldi	r22, 0x20	; 32
 3e6:	71 e0       	ldi	r23, 0x01	; 1
 3e8:	c8 01       	movw	r24, r16
 3ea:	0e 94 25 03 	call	0x64a	; 0x64a <__itoa_ncheck>
 3ee:	4a e0       	ldi	r20, 0x0A	; 10
 3f0:	60 e1       	ldi	r22, 0x10	; 16
 3f2:	71 e0       	ldi	r23, 0x01	; 1
 3f4:	ce 01       	movw	r24, r28
 3f6:	0e 94 25 03 	call	0x64a	; 0x64a <__itoa_ncheck>
 3fa:	c5 01       	movw	r24, r10
 3fc:	b4 01       	movw	r22, r8
 3fe:	0e 94 2b 02 	call	0x456	; 0x456 <__fixsfsi>
 402:	dc 01       	movw	r26, r24
 404:	cb 01       	movw	r24, r22
 406:	4a e0       	ldi	r20, 0x0A	; 10
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	71 e0       	ldi	r23, 0x01	; 1
 40c:	0e 94 25 03 	call	0x64a	; 0x64a <__itoa_ncheck>
		itoa(axsis_x,valX_String,10);
		itoa(axsis_y,valY_String,10);
		itoa(axsis_z,valZ_String,10);
		
		itoa(raiz,valTotal,10);
		envia_cadena_usart(valTotal);
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 9a 00 	call	0x134	; 0x134 <envia_cadena_usart>
		envia_caracter_usart('|');
 418:	8c e7       	ldi	r24, 0x7C	; 124
 41a:	0e 94 92 00 	call	0x124	; 0x124 <envia_caracter_usart>
 41e:	4a e0       	ldi	r20, 0x0A	; 10
 420:	60 e1       	ldi	r22, 0x10	; 16
 422:	71 e0       	ldi	r23, 0x01	; 1
 424:	ce 01       	movw	r24, r28
 426:	0e 94 25 03 	call	0x64a	; 0x64a <__itoa_ncheck>
		
		itoa(axsis_z,valZ_String,10);
		envia_cadena_usart(valX_String);
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 9a 00 	call	0x134	; 0x134 <envia_cadena_usart>
		envia_caracter_usart(',');
 432:	8c e2       	ldi	r24, 0x2C	; 44
 434:	0e 94 92 00 	call	0x124	; 0x124 <envia_caracter_usart>
		envia_cadena_usart(valY_String);
 438:	80 e2       	ldi	r24, 0x20	; 32
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 9a 00 	call	0x134	; 0x134 <envia_cadena_usart>
		envia_caracter_usart(',');
 440:	8c e2       	ldi	r24, 0x2C	; 44
 442:	0e 94 92 00 	call	0x124	; 0x124 <envia_caracter_usart>
		envia_cadena_usart(valZ_String);
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 9a 00 	call	0x134	; 0x134 <envia_cadena_usart>
		envia_caracter_usart('\n');
 44e:	8a e0       	ldi	r24, 0x0A	; 10
 450:	0e 94 92 00 	call	0x124	; 0x124 <envia_caracter_usart>
 454:	70 cf       	rjmp	.-288    	; 0x336 <main+0xc>

00000456 <__fixsfsi>:
 456:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 45a:	68 94       	set
 45c:	b1 11       	cpse	r27, r1
 45e:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_szero>
 462:	08 95       	ret

00000464 <__fixunssfsi>:
 464:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_splitA>
 468:	88 f0       	brcs	.+34     	; 0x48c <__fixunssfsi+0x28>
 46a:	9f 57       	subi	r25, 0x7F	; 127
 46c:	98 f0       	brcs	.+38     	; 0x494 <__fixunssfsi+0x30>
 46e:	b9 2f       	mov	r27, r25
 470:	99 27       	eor	r25, r25
 472:	b7 51       	subi	r27, 0x17	; 23
 474:	b0 f0       	brcs	.+44     	; 0x4a2 <__fixunssfsi+0x3e>
 476:	e1 f0       	breq	.+56     	; 0x4b0 <__fixunssfsi+0x4c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	1a f0       	brmi	.+6      	; 0x488 <__fixunssfsi+0x24>
 482:	ba 95       	dec	r27
 484:	c9 f7       	brne	.-14     	; 0x478 <__fixunssfsi+0x14>
 486:	14 c0       	rjmp	.+40     	; 0x4b0 <__fixunssfsi+0x4c>
 488:	b1 30       	cpi	r27, 0x01	; 1
 48a:	91 f0       	breq	.+36     	; 0x4b0 <__fixunssfsi+0x4c>
 48c:	0e 94 c0 02 	call	0x580	; 0x580 <__fp_zero>
 490:	b1 e0       	ldi	r27, 0x01	; 1
 492:	08 95       	ret
 494:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_zero>
 498:	67 2f       	mov	r22, r23
 49a:	78 2f       	mov	r23, r24
 49c:	88 27       	eor	r24, r24
 49e:	b8 5f       	subi	r27, 0xF8	; 248
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <__fixunssfsi+0x4c>
 4a2:	b9 3f       	cpi	r27, 0xF9	; 249
 4a4:	cc f3       	brlt	.-14     	; 0x498 <__fixunssfsi+0x34>
 4a6:	86 95       	lsr	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b3 95       	inc	r27
 4ae:	d9 f7       	brne	.-10     	; 0x4a6 <__fixunssfsi+0x42>
 4b0:	3e f4       	brtc	.+14     	; 0x4c0 <__fixunssfsi+0x5c>
 4b2:	90 95       	com	r25
 4b4:	80 95       	com	r24
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <__floatunsisf>:
 4c2:	e8 94       	clt
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <__floatsisf+0x12>

000004c6 <__floatsisf>:
 4c6:	97 fb       	bst	r25, 7
 4c8:	3e f4       	brtc	.+14     	; 0x4d8 <__floatsisf+0x12>
 4ca:	90 95       	com	r25
 4cc:	80 95       	com	r24
 4ce:	70 95       	com	r23
 4d0:	61 95       	neg	r22
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	99 23       	and	r25, r25
 4da:	a9 f0       	breq	.+42     	; 0x506 <__floatsisf+0x40>
 4dc:	f9 2f       	mov	r31, r25
 4de:	96 e9       	ldi	r25, 0x96	; 150
 4e0:	bb 27       	eor	r27, r27
 4e2:	93 95       	inc	r25
 4e4:	f6 95       	lsr	r31
 4e6:	87 95       	ror	r24
 4e8:	77 95       	ror	r23
 4ea:	67 95       	ror	r22
 4ec:	b7 95       	ror	r27
 4ee:	f1 11       	cpse	r31, r1
 4f0:	f8 cf       	rjmp	.-16     	; 0x4e2 <__floatsisf+0x1c>
 4f2:	fa f4       	brpl	.+62     	; 0x532 <__floatsisf+0x6c>
 4f4:	bb 0f       	add	r27, r27
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__floatsisf+0x36>
 4f8:	60 ff       	sbrs	r22, 0
 4fa:	1b c0       	rjmp	.+54     	; 0x532 <__floatsisf+0x6c>
 4fc:	6f 5f       	subi	r22, 0xFF	; 255
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	8f 4f       	sbci	r24, 0xFF	; 255
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	16 c0       	rjmp	.+44     	; 0x532 <__floatsisf+0x6c>
 506:	88 23       	and	r24, r24
 508:	11 f0       	breq	.+4      	; 0x50e <__floatsisf+0x48>
 50a:	96 e9       	ldi	r25, 0x96	; 150
 50c:	11 c0       	rjmp	.+34     	; 0x530 <__floatsisf+0x6a>
 50e:	77 23       	and	r23, r23
 510:	21 f0       	breq	.+8      	; 0x51a <__floatsisf+0x54>
 512:	9e e8       	ldi	r25, 0x8E	; 142
 514:	87 2f       	mov	r24, r23
 516:	76 2f       	mov	r23, r22
 518:	05 c0       	rjmp	.+10     	; 0x524 <__floatsisf+0x5e>
 51a:	66 23       	and	r22, r22
 51c:	71 f0       	breq	.+28     	; 0x53a <__floatsisf+0x74>
 51e:	96 e8       	ldi	r25, 0x86	; 134
 520:	86 2f       	mov	r24, r22
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	2a f0       	brmi	.+10     	; 0x532 <__floatsisf+0x6c>
 528:	9a 95       	dec	r25
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	88 1f       	adc	r24, r24
 530:	da f7       	brpl	.-10     	; 0x528 <__floatsisf+0x62>
 532:	88 0f       	add	r24, r24
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	97 f9       	bld	r25, 7
 53a:	08 95       	ret

0000053c <__fp_split3>:
 53c:	57 fd       	sbrc	r21, 7
 53e:	90 58       	subi	r25, 0x80	; 128
 540:	44 0f       	add	r20, r20
 542:	55 1f       	adc	r21, r21
 544:	59 f0       	breq	.+22     	; 0x55c <__fp_splitA+0x10>
 546:	5f 3f       	cpi	r21, 0xFF	; 255
 548:	71 f0       	breq	.+28     	; 0x566 <__fp_splitA+0x1a>
 54a:	47 95       	ror	r20

0000054c <__fp_splitA>:
 54c:	88 0f       	add	r24, r24
 54e:	97 fb       	bst	r25, 7
 550:	99 1f       	adc	r25, r25
 552:	61 f0       	breq	.+24     	; 0x56c <__fp_splitA+0x20>
 554:	9f 3f       	cpi	r25, 0xFF	; 255
 556:	79 f0       	breq	.+30     	; 0x576 <__fp_splitA+0x2a>
 558:	87 95       	ror	r24
 55a:	08 95       	ret
 55c:	12 16       	cp	r1, r18
 55e:	13 06       	cpc	r1, r19
 560:	14 06       	cpc	r1, r20
 562:	55 1f       	adc	r21, r21
 564:	f2 cf       	rjmp	.-28     	; 0x54a <__fp_split3+0xe>
 566:	46 95       	lsr	r20
 568:	f1 df       	rcall	.-30     	; 0x54c <__fp_splitA>
 56a:	08 c0       	rjmp	.+16     	; 0x57c <__fp_splitA+0x30>
 56c:	16 16       	cp	r1, r22
 56e:	17 06       	cpc	r1, r23
 570:	18 06       	cpc	r1, r24
 572:	99 1f       	adc	r25, r25
 574:	f1 cf       	rjmp	.-30     	; 0x558 <__fp_splitA+0xc>
 576:	86 95       	lsr	r24
 578:	71 05       	cpc	r23, r1
 57a:	61 05       	cpc	r22, r1
 57c:	08 94       	sec
 57e:	08 95       	ret

00000580 <__fp_zero>:
 580:	e8 94       	clt

00000582 <__fp_szero>:
 582:	bb 27       	eor	r27, r27
 584:	66 27       	eor	r22, r22
 586:	77 27       	eor	r23, r23
 588:	cb 01       	movw	r24, r22
 58a:	97 f9       	bld	r25, 7
 58c:	08 95       	ret
 58e:	19 f4       	brne	.+6      	; 0x596 <__fp_szero+0x14>
 590:	16 f4       	brtc	.+4      	; 0x596 <__fp_szero+0x14>
 592:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_nan>
 596:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_mpack>

0000059a <sqrt>:
 59a:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_splitA>
 59e:	b8 f3       	brcs	.-18     	; 0x58e <__fp_szero+0xc>
 5a0:	99 23       	and	r25, r25
 5a2:	c9 f3       	breq	.-14     	; 0x596 <__fp_szero+0x14>
 5a4:	b6 f3       	brts	.-20     	; 0x592 <__fp_szero+0x10>
 5a6:	9f 57       	subi	r25, 0x7F	; 127
 5a8:	55 0b       	sbc	r21, r21
 5aa:	87 ff       	sbrs	r24, 7
 5ac:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_norm2>
 5b0:	00 24       	eor	r0, r0
 5b2:	a0 e6       	ldi	r26, 0x60	; 96
 5b4:	40 ea       	ldi	r20, 0xA0	; 160
 5b6:	90 01       	movw	r18, r0
 5b8:	80 58       	subi	r24, 0x80	; 128
 5ba:	56 95       	lsr	r21
 5bc:	97 95       	ror	r25
 5be:	28 f4       	brcc	.+10     	; 0x5ca <sqrt+0x30>
 5c0:	80 5c       	subi	r24, 0xC0	; 192
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	20 f0       	brcs	.+8      	; 0x5d2 <sqrt+0x38>
 5ca:	26 17       	cp	r18, r22
 5cc:	37 07       	cpc	r19, r23
 5ce:	48 07       	cpc	r20, r24
 5d0:	30 f4       	brcc	.+12     	; 0x5de <sqrt+0x44>
 5d2:	62 1b       	sub	r22, r18
 5d4:	73 0b       	sbc	r23, r19
 5d6:	84 0b       	sbc	r24, r20
 5d8:	20 29       	or	r18, r0
 5da:	31 29       	or	r19, r1
 5dc:	4a 2b       	or	r20, r26
 5de:	a6 95       	lsr	r26
 5e0:	17 94       	ror	r1
 5e2:	07 94       	ror	r0
 5e4:	20 25       	eor	r18, r0
 5e6:	31 25       	eor	r19, r1
 5e8:	4a 27       	eor	r20, r26
 5ea:	58 f7       	brcc	.-42     	; 0x5c2 <sqrt+0x28>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	20 f0       	brcs	.+8      	; 0x5fc <sqrt+0x62>
 5f4:	26 17       	cp	r18, r22
 5f6:	37 07       	cpc	r19, r23
 5f8:	48 07       	cpc	r20, r24
 5fa:	30 f4       	brcc	.+12     	; 0x608 <sqrt+0x6e>
 5fc:	62 0b       	sbc	r22, r18
 5fe:	73 0b       	sbc	r23, r19
 600:	84 0b       	sbc	r24, r20
 602:	20 0d       	add	r18, r0
 604:	31 1d       	adc	r19, r1
 606:	41 1d       	adc	r20, r1
 608:	a0 95       	com	r26
 60a:	81 f7       	brne	.-32     	; 0x5ec <sqrt+0x52>
 60c:	b9 01       	movw	r22, r18
 60e:	84 2f       	mov	r24, r20
 610:	91 58       	subi	r25, 0x81	; 129
 612:	88 0f       	add	r24, r24
 614:	96 95       	lsr	r25
 616:	87 95       	ror	r24
 618:	08 95       	ret

0000061a <__fp_mpack>:
 61a:	9f 3f       	cpi	r25, 0xFF	; 255
 61c:	31 f0       	breq	.+12     	; 0x62a <__fp_mpack_finite+0xc>

0000061e <__fp_mpack_finite>:
 61e:	91 50       	subi	r25, 0x01	; 1
 620:	20 f4       	brcc	.+8      	; 0x62a <__fp_mpack_finite+0xc>
 622:	87 95       	ror	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	88 0f       	add	r24, r24
 62c:	91 1d       	adc	r25, r1
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <__fp_nan>:
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	80 ec       	ldi	r24, 0xC0	; 192
 63a:	08 95       	ret

0000063c <__fp_norm2>:
 63c:	91 50       	subi	r25, 0x01	; 1
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	d2 f7       	brpl	.-12     	; 0x63c <__fp_norm2>
 648:	08 95       	ret

0000064a <__itoa_ncheck>:
 64a:	bb 27       	eor	r27, r27
 64c:	4a 30       	cpi	r20, 0x0A	; 10
 64e:	31 f4       	brne	.+12     	; 0x65c <__itoa_ncheck+0x12>
 650:	99 23       	and	r25, r25
 652:	22 f4       	brpl	.+8      	; 0x65c <__itoa_ncheck+0x12>
 654:	bd e2       	ldi	r27, 0x2D	; 45
 656:	90 95       	com	r25
 658:	81 95       	neg	r24
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	0c 94 31 03 	jmp	0x662	; 0x662 <__utoa_common>

00000660 <__utoa_ncheck>:
 660:	bb 27       	eor	r27, r27

00000662 <__utoa_common>:
 662:	fb 01       	movw	r30, r22
 664:	55 27       	eor	r21, r21
 666:	aa 27       	eor	r26, r26
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	aa 1f       	adc	r26, r26
 66e:	a4 17       	cp	r26, r20
 670:	10 f0       	brcs	.+4      	; 0x676 <__utoa_common+0x14>
 672:	a4 1b       	sub	r26, r20
 674:	83 95       	inc	r24
 676:	50 51       	subi	r21, 0x10	; 16
 678:	b9 f7       	brne	.-18     	; 0x668 <__utoa_common+0x6>
 67a:	a0 5d       	subi	r26, 0xD0	; 208
 67c:	aa 33       	cpi	r26, 0x3A	; 58
 67e:	08 f0       	brcs	.+2      	; 0x682 <__utoa_common+0x20>
 680:	a9 5d       	subi	r26, 0xD9	; 217
 682:	a1 93       	st	Z+, r26
 684:	00 97       	sbiw	r24, 0x00	; 0
 686:	79 f7       	brne	.-34     	; 0x666 <__utoa_common+0x4>
 688:	b1 11       	cpse	r27, r1
 68a:	b1 93       	st	Z+, r27
 68c:	11 92       	st	Z+, r1
 68e:	cb 01       	movw	r24, r22
 690:	0c 94 4a 03 	jmp	0x694	; 0x694 <strrev>

00000694 <strrev>:
 694:	dc 01       	movw	r26, r24
 696:	fc 01       	movw	r30, r24
 698:	67 2f       	mov	r22, r23
 69a:	71 91       	ld	r23, Z+
 69c:	77 23       	and	r23, r23
 69e:	e1 f7       	brne	.-8      	; 0x698 <strrev+0x4>
 6a0:	32 97       	sbiw	r30, 0x02	; 2
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <strrev+0x18>
 6a4:	7c 91       	ld	r23, X
 6a6:	6d 93       	st	X+, r22
 6a8:	70 83       	st	Z, r23
 6aa:	62 91       	ld	r22, -Z
 6ac:	ae 17       	cp	r26, r30
 6ae:	bf 07       	cpc	r27, r31
 6b0:	c8 f3       	brcs	.-14     	; 0x6a4 <strrev+0x10>
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
